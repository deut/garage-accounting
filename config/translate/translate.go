package translate

import "fmt"

const (
	EN = "EN"
	UA = "UA"
)

type Translate struct {
	EN map[string]string
	UA map[string]string
}

var currentLang map[string]string

var t = Translate{
	UA: map[string]string{
		"garageNumber": "‚Ññ –≥–∞—Ä–∞–∂—É",
		"fullName":     "–Ü–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ",
		"phoneNumber":  "–¢–µ–ª–µ—Ñ–æ–Ω",
		"address":      "–ê–¥—Ä–µ—Å–∞",

		"enterGarageNumber": "–≤–≤–µ–¥—ñ—Ç—å ‚Ññ –≥–∞—Ä–∞–∂—É",
		"enterFullName":     "–≤–≤–µ–¥—ñ—Ç—å –Ü–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ",
		"enterPhoneNumber":  "–≤–≤–µ–¥—ñ—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω",
		"enterAddress":      "–≤–≤–µ–¥—ñ—Ç—å –ê–¥—Ä–µ—Å–∞",
		// "lastPayedYear":   "–û—Å—Ç–∞–Ω–Ω—ñ–π —Å–ø–ª–∞—á–µ–Ω–∏–π —Ä—ñ–∫",
		"edit":            "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
		"paymentButton":   "–û–ø–ª–∞—Ç–∞",
		"paymentFormName": "–û–ø–ª–∞—Ç–∞",
		"create":          "–°—Ç–≤–æ—Ä–∏—Ç–∏",
		"cancel":          "–í—ñ–¥–º—ñ–Ω–∞",
		"amount":          "–°—É–º–∞",
		"selectYearPromt": "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ",
		"showPayments":    "–û–ø–ª–∞—Ç–∏",
		"addAccount":      "–î–æ–¥–∞—Ç–∏",
		"done":            "–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏",
		"createdAt":       "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É",

		"garageNumberBlankError": "–ù–æ–º–µ—Ä –≥–∞—Ä–∞–∂—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π",
		"fullNameBlankError":     "–Ü–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–µ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ",
		"phoneNumberBlankError":  "–ù–æ–º–µ—Ä –Ω–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π",
		"addressBlankError":      "–ê–¥—Ä–µ—Å–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π",
		"searchSign":             "üîç",
	},
	EN: map[string]string{},
}

func SetLang(l string) error {
	switch l {
	case UA:
		currentLang = t.UA
	case EN:
		currentLang = t.EN
	default:
		return fmt.Errorf("unknown language %s", l)
	}

	return nil
}

func T(key string) string {
	if cu, ok := currentLang[key]; ok {
		return cu
	} else {
		return fmt.Sprintf("missing transtation['%s']", key)
	}
}
